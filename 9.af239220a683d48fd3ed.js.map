{"version":3,"sources":["webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/Polynomial.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/8BitByte.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/math.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/RSBlock.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/ErrorCorrectLevel.js","webpack:///./node_modules/_qrcode.react@0.9.2@qrcode.react/lib/index.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/QRCode.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/util.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/BitBuffer.js","webpack:///./node_modules/_qr.js@0.0.0@qr.js/lib/mode.js"],"names":["math","__webpack_require__","QRPolynomial","num","shift","undefined","length","Error","offset","this","Array","i","prototype","get","index","getLength","multiply","e","j","gexp","glog","mod","ratio","module","exports","mode","QR8bitByte","data","MODE_8BIT_BYTE","buffer","write","put","charCodeAt","QRMath","n","LOG_TABLE","EXP_TABLE","ECL","QRRSBlock","totalCount","dataCount","RS_BLOCK_TABLE","getRSBlocks","typeNumber","errorCorrectLevel","rsBlock","getRsBlockTable","list","count","push","L","M","Q","H","baXK","t","r","_typeof","obj","Symbol","iterator","constructor","_extends","Object","assign","target","arguments","source","key","hasOwnProperty","call","apply","_objectSpread","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","_defineProperty","_objectWithoutProperties","excluded","sourceKeys","indexOf","sourceSymbolKeys","propertyIsEnumerable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","defineProperty","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","value","p","_setPrototypeOf","ReferenceError","React","PropTypes","QRCodeImpl","ErrorCorrectLevel","convertStr","str","out","charcode","String","fromCharCode","DEFAULT_PROPS","size","level","bgColor","fgColor","includeMargin","PROP_TYPES","string","isRequired","number","oneOf","bool","generatePath","modules","margin","ops","row","y","start","cell","x","join","SUPPORTS_PATH2D","Path2D","QRCodeCanvas","_React$PureComponent","_getPrototypeOf2","_this","_len","args","_key","PureComponent","update","_this$props","qrcode","addData","make","_canvas","canvas","ctx","getContext","cells","numCells","pixelRatio","window","devicePixelRatio","height","width","scale","fillStyle","fillRect","fill","rdx","cdx","_this2","_this$props2","style","otherProps","canvasStyle","createElement","ref","_ref","QRCodeSVG","_React$PureComponent2","_this$props3","fgPath","shapeRendering","viewBox","d","QRCode","renderAs","Component","defaultProps","BitByte","RSBlock","BitBuffer","util","Polynomial","moduleCount","dataCache","dataList","proto","newData","isDark","col","getModuleCount","rsBlocks","totalDataCount","getLengthInBits","makeImpl","getBestMaskPattern","test","maskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","c","minLostPoint","pattern","lostPoint","getLostPoint","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","beginFill","moveTo","lineTo","endFill","pos","getPatternPosition","bits","getBCHTypeNumber","Math","floor","getBCHTypeInfo","inc","bitIndex","byteIndex","dark","getMask","PAD0","PAD1","putBit","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","max","rsPoly","getErrorCorrectPolynomial","modPoly","modIndex","totalCodeCount","Mode","QRUtil","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHDigit","digit","errorCorrectLength","a","type","MODE_NUMBER","MODE_ALPHA_NUM","MODE_KANJI","qrCode","sameCount","darkCount","abs","QRBitBuffer","bufIndex","bit"],"mappings":"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","file":"9.af239220a683d48fd3ed.js","sourcesContent":["var math = require('./math');\n\nfunction QRPolynomial(num, shift) {\n\n\tif (num.length == undefined) {\n\t\tthrow new Error(num.length + \"/\" + shift);\n\t}\n\n\tvar offset = 0;\n\n\twhile (offset < num.length && num[offset] == 0) {\n\t\toffset++;\n\t}\n\n\tthis.num = new Array(num.length - offset + shift);\n\tfor (var i = 0; i < num.length - offset; i++) {\n\t\tthis.num[i] = num[i + offset];\n\t}\n}\n\nQRPolynomial.prototype = {\n\n\tget : function(index) {\n\t\treturn this.num[index];\n\t},\n\t\n\tgetLength : function() {\n\t\treturn this.num.length;\n\t},\n\t\n\tmultiply : function(e) {\n\t\n\t\tvar num = new Array(this.getLength() + e.getLength() - 1);\n\t\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tfor (var j = 0; j < e.getLength(); j++) {\n\t\t\t\tnum[i + j] ^= math.gexp(math.glog(this.get(i) ) + math.glog(e.get(j) ) );\n\t\t\t}\n\t\t}\n\t\n\t\treturn new QRPolynomial(num, 0);\n\t},\n\t\n\tmod : function(e) {\n\t\n\t\tif (this.getLength() - e.getLength() < 0) {\n\t\t\treturn this;\n\t\t}\n\t\n\t\tvar ratio = math.glog(this.get(0) ) - math.glog(e.get(0) );\n\t\n\t\tvar num = new Array(this.getLength() );\n\t\t\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tnum[i] = this.get(i);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < e.getLength(); i++) {\n\t\t\tnum[i] ^= math.gexp(math.glog(e.get(i) ) + ratio);\n\t\t}\n\t\n\t\t// recursive call\n\t\treturn new QRPolynomial(num, 0).mod(e);\n\t}\n};\n\nmodule.exports = QRPolynomial;\n","var mode = require('./mode');\n\nfunction QR8bitByte(data) {\n\tthis.mode = mode.MODE_8BIT_BYTE;\n\tthis.data = data;\n}\n\nQR8bitByte.prototype = {\n\n\tgetLength : function(buffer) {\n\t\treturn this.data.length;\n\t},\n\t\n\twrite : function(buffer) {\n\t\tfor (var i = 0; i < this.data.length; i++) {\n\t\t\t// not JIS ...\n\t\t\tbuffer.put(this.data.charCodeAt(i), 8);\n\t\t}\n\t}\n};\n\nmodule.exports = QR8bitByte;\n\n","var QRMath = {\n\n\tglog : function(n) {\n\t\n\t\tif (n < 1) {\n\t\t\tthrow new Error(\"glog(\" + n + \")\");\n\t\t}\n\t\t\n\t\treturn QRMath.LOG_TABLE[n];\n\t},\n\t\n\tgexp : function(n) {\n\t\n\t\twhile (n < 0) {\n\t\t\tn += 255;\n\t\t}\n\t\n\t\twhile (n >= 256) {\n\t\t\tn -= 255;\n\t\t}\n\t\n\t\treturn QRMath.EXP_TABLE[n];\n\t},\n\t\n\tEXP_TABLE : new Array(256),\n\t\n\tLOG_TABLE : new Array(256)\n\n};\n\t\nfor (var i = 0; i < 8; i++) {\n\tQRMath.EXP_TABLE[i] = 1 << i;\n}\nfor (var i = 8; i < 256; i++) {\n\tQRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]\n\t\t^ QRMath.EXP_TABLE[i - 5]\n\t\t^ QRMath.EXP_TABLE[i - 6]\n\t\t^ QRMath.EXP_TABLE[i - 8];\n}\nfor (var i = 0; i < 255; i++) {\n\tQRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;\n}\n\nmodule.exports = QRMath;\n","// ErrorCorrectLevel\nvar ECL = require('./ErrorCorrectLevel');\n\nfunction QRRSBlock(totalCount, dataCount) {\n\tthis.totalCount = totalCount;\n\tthis.dataCount  = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [\n\n\t// L\n\t// M\n\t// Q\n\t// H\n\n\t// 1\n\t[1, 26, 19],\n\t[1, 26, 16],\n\t[1, 26, 13],\n\t[1, 26, 9],\n\t\n\t// 2\n\t[1, 44, 34],\n\t[1, 44, 28],\n\t[1, 44, 22],\n\t[1, 44, 16],\n\n\t// 3\n\t[1, 70, 55],\n\t[1, 70, 44],\n\t[2, 35, 17],\n\t[2, 35, 13],\n\n\t// 4\t\t\n\t[1, 100, 80],\n\t[2, 50, 32],\n\t[2, 50, 24],\n\t[4, 25, 9],\n\t\n\t// 5\n\t[1, 134, 108],\n\t[2, 67, 43],\n\t[2, 33, 15, 2, 34, 16],\n\t[2, 33, 11, 2, 34, 12],\n\t\n\t// 6\n\t[2, 86, 68],\n\t[4, 43, 27],\n\t[4, 43, 19],\n\t[4, 43, 15],\n\t\n\t// 7\t\t\n\t[2, 98, 78],\n\t[4, 49, 31],\n\t[2, 32, 14, 4, 33, 15],\n\t[4, 39, 13, 1, 40, 14],\n\t\n\t// 8\n\t[2, 121, 97],\n\t[2, 60, 38, 2, 61, 39],\n\t[4, 40, 18, 2, 41, 19],\n\t[4, 40, 14, 2, 41, 15],\n\t\n\t// 9\n\t[2, 146, 116],\n\t[3, 58, 36, 2, 59, 37],\n\t[4, 36, 16, 4, 37, 17],\n\t[4, 36, 12, 4, 37, 13],\n\t\n\t// 10\t\t\n\t[2, 86, 68, 2, 87, 69],\n\t[4, 69, 43, 1, 70, 44],\n\t[6, 43, 19, 2, 44, 20],\n\t[6, 43, 15, 2, 44, 16],\n\n\t// 11\n\t[4, 101, 81],\n\t[1, 80, 50, 4, 81, 51],\n\t[4, 50, 22, 4, 51, 23],\n\t[3, 36, 12, 8, 37, 13],\n\n\t// 12\n\t[2, 116, 92, 2, 117, 93],\n\t[6, 58, 36, 2, 59, 37],\n\t[4, 46, 20, 6, 47, 21],\n\t[7, 42, 14, 4, 43, 15],\n\n\t// 13\n\t[4, 133, 107],\n\t[8, 59, 37, 1, 60, 38],\n\t[8, 44, 20, 4, 45, 21],\n\t[12, 33, 11, 4, 34, 12],\n\n\t// 14\n\t[3, 145, 115, 1, 146, 116],\n\t[4, 64, 40, 5, 65, 41],\n\t[11, 36, 16, 5, 37, 17],\n\t[11, 36, 12, 5, 37, 13],\n\n\t// 15\n\t[5, 109, 87, 1, 110, 88],\n\t[5, 65, 41, 5, 66, 42],\n\t[5, 54, 24, 7, 55, 25],\n\t[11, 36, 12],\n\n\t// 16\n\t[5, 122, 98, 1, 123, 99],\n\t[7, 73, 45, 3, 74, 46],\n\t[15, 43, 19, 2, 44, 20],\n\t[3, 45, 15, 13, 46, 16],\n\n\t// 17\n\t[1, 135, 107, 5, 136, 108],\n\t[10, 74, 46, 1, 75, 47],\n\t[1, 50, 22, 15, 51, 23],\n\t[2, 42, 14, 17, 43, 15],\n\n\t// 18\n\t[5, 150, 120, 1, 151, 121],\n\t[9, 69, 43, 4, 70, 44],\n\t[17, 50, 22, 1, 51, 23],\n\t[2, 42, 14, 19, 43, 15],\n\n\t// 19\n\t[3, 141, 113, 4, 142, 114],\n\t[3, 70, 44, 11, 71, 45],\n\t[17, 47, 21, 4, 48, 22],\n\t[9, 39, 13, 16, 40, 14],\n\n\t// 20\n\t[3, 135, 107, 5, 136, 108],\n\t[3, 67, 41, 13, 68, 42],\n\t[15, 54, 24, 5, 55, 25],\n\t[15, 43, 15, 10, 44, 16],\n\n\t// 21\n\t[4, 144, 116, 4, 145, 117],\n\t[17, 68, 42],\n\t[17, 50, 22, 6, 51, 23],\n\t[19, 46, 16, 6, 47, 17],\n\n\t// 22\n\t[2, 139, 111, 7, 140, 112],\n\t[17, 74, 46],\n\t[7, 54, 24, 16, 55, 25],\n\t[34, 37, 13],\n\n\t// 23\n\t[4, 151, 121, 5, 152, 122],\n\t[4, 75, 47, 14, 76, 48],\n\t[11, 54, 24, 14, 55, 25],\n\t[16, 45, 15, 14, 46, 16],\n\n\t// 24\n\t[6, 147, 117, 4, 148, 118],\n\t[6, 73, 45, 14, 74, 46],\n\t[11, 54, 24, 16, 55, 25],\n\t[30, 46, 16, 2, 47, 17],\n\n\t// 25\n\t[8, 132, 106, 4, 133, 107],\n\t[8, 75, 47, 13, 76, 48],\n\t[7, 54, 24, 22, 55, 25],\n\t[22, 45, 15, 13, 46, 16],\n\n\t// 26\n\t[10, 142, 114, 2, 143, 115],\n\t[19, 74, 46, 4, 75, 47],\n\t[28, 50, 22, 6, 51, 23],\n\t[33, 46, 16, 4, 47, 17],\n\n\t// 27\n\t[8, 152, 122, 4, 153, 123],\n\t[22, 73, 45, 3, 74, 46],\n\t[8, 53, 23, 26, 54, 24],\n\t[12, 45, 15, 28, 46, 16],\n\n\t// 28\n\t[3, 147, 117, 10, 148, 118],\n\t[3, 73, 45, 23, 74, 46],\n\t[4, 54, 24, 31, 55, 25],\n\t[11, 45, 15, 31, 46, 16],\n\n\t// 29\n\t[7, 146, 116, 7, 147, 117],\n\t[21, 73, 45, 7, 74, 46],\n\t[1, 53, 23, 37, 54, 24],\n\t[19, 45, 15, 26, 46, 16],\n\n\t// 30\n\t[5, 145, 115, 10, 146, 116],\n\t[19, 75, 47, 10, 76, 48],\n\t[15, 54, 24, 25, 55, 25],\n\t[23, 45, 15, 25, 46, 16],\n\n\t// 31\n\t[13, 145, 115, 3, 146, 116],\n\t[2, 74, 46, 29, 75, 47],\n\t[42, 54, 24, 1, 55, 25],\n\t[23, 45, 15, 28, 46, 16],\n\n\t// 32\n\t[17, 145, 115],\n\t[10, 74, 46, 23, 75, 47],\n\t[10, 54, 24, 35, 55, 25],\n\t[19, 45, 15, 35, 46, 16],\n\n\t// 33\n\t[17, 145, 115, 1, 146, 116],\n\t[14, 74, 46, 21, 75, 47],\n\t[29, 54, 24, 19, 55, 25],\n\t[11, 45, 15, 46, 46, 16],\n\n\t// 34\n\t[13, 145, 115, 6, 146, 116],\n\t[14, 74, 46, 23, 75, 47],\n\t[44, 54, 24, 7, 55, 25],\n\t[59, 46, 16, 1, 47, 17],\n\n\t// 35\n\t[12, 151, 121, 7, 152, 122],\n\t[12, 75, 47, 26, 76, 48],\n\t[39, 54, 24, 14, 55, 25],\n\t[22, 45, 15, 41, 46, 16],\n\n\t// 36\n\t[6, 151, 121, 14, 152, 122],\n\t[6, 75, 47, 34, 76, 48],\n\t[46, 54, 24, 10, 55, 25],\n\t[2, 45, 15, 64, 46, 16],\n\n\t// 37\n\t[17, 152, 122, 4, 153, 123],\n\t[29, 74, 46, 14, 75, 47],\n\t[49, 54, 24, 10, 55, 25],\n\t[24, 45, 15, 46, 46, 16],\n\n\t// 38\n\t[4, 152, 122, 18, 153, 123],\n\t[13, 74, 46, 32, 75, 47],\n\t[48, 54, 24, 14, 55, 25],\n\t[42, 45, 15, 32, 46, 16],\n\n\t// 39\n\t[20, 147, 117, 4, 148, 118],\n\t[40, 75, 47, 7, 76, 48],\n\t[43, 54, 24, 22, 55, 25],\n\t[10, 45, 15, 67, 46, 16],\n\n\t// 40\n\t[19, 148, 118, 6, 149, 119],\n\t[18, 75, 47, 31, 76, 48],\n\t[34, 54, 24, 34, 55, 25],\n\t[20, 45, 15, 61, 46, 16]\n];\n\nQRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {\n\t\n\tvar rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\t\n\tif (rsBlock == undefined) {\n\t\tthrow new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n\t}\n\n\tvar length = rsBlock.length / 3;\n\t\n\tvar list = new Array();\n\t\n\tfor (var i = 0; i < length; i++) {\n\n\t\tvar count = rsBlock[i * 3 + 0];\n\t\tvar totalCount = rsBlock[i * 3 + 1];\n\t\tvar dataCount  = rsBlock[i * 3 + 2];\n\n\t\tfor (var j = 0; j < count; j++) {\n\t\t\tlist.push(new QRRSBlock(totalCount, dataCount) );\t\n\t\t}\n\t}\n\t\n\treturn list;\n}\n\nQRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {\n\n\tswitch(errorCorrectLevel) {\n\tcase ECL.L :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\tcase ECL.M :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\tcase ECL.Q :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\tcase ECL.H :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\tdefault :\n\t\treturn undefined;\n\t}\n}\n\nmodule.exports = QRRSBlock;\n","module.exports = {\n\tL : 1,\n\tM : 0,\n\tQ : 3,\n\tH : 2\n};\n\n","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types'); // qr.js doesn't handle error level of zero (M) so we need to do it right,\n// thus the deep require.\n\n\nvar QRCodeImpl = require('qr.js/lib/QRCode');\n\nvar ErrorCorrectLevel = require('qr.js/lib/ErrorCorrectLevel'); // Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.\n// This allows us to encode Hanji, Kanji, emoji, etc. Ideally we'd do more\n// detection and not resort to byte-mode if possible, but we're trading off\n// a smaller library for a smaller amount of data we can potentially encode.\n// Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\n\n\nfunction convertStr(str) {\n  var out = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n\n    if (charcode < 0x0080) {\n      out += String.fromCharCode(charcode);\n    } else if (charcode < 0x0800) {\n      out += String.fromCharCode(0xc0 | charcode >> 6);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      out += String.fromCharCode(0xe0 | charcode >> 12);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else {\n      // This is a surrogate pair, so we'll reconsitute the pieces and work\n      // from that\n      i++;\n      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      out += String.fromCharCode(0xf0 | charcode >> 18);\n      out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    }\n  }\n\n  return out;\n}\n\nvar DEFAULT_PROPS = {\n  size: 128,\n  level: 'L',\n  bgColor: '#FFFFFF',\n  fgColor: '#000000',\n  includeMargin: false\n};\nvar PROP_TYPES = {\n  value: PropTypes.string.isRequired,\n  size: PropTypes.number,\n  level: PropTypes.oneOf(['L', 'M', 'Q', 'H']),\n  bgColor: PropTypes.string,\n  fgColor: PropTypes.string,\n  includeMargin: PropTypes.bool\n};\nvar MARGIN_SIZE = 4;\n\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      } // end of row, clean up or skip\n\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return;\n        }\n\n        if (start === null) {\n          // Just a single dark module.\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          // Otherwise finish the current line.\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join('');\n} // For canvas we're going to switch our drawing mode based on whether or not\n// the environment supports Path2D. We only need the constructor to be\n// supported.\n\n\nvar SUPPORTS_PATH2D = typeof Path2D === 'function';\n\nvar QRCodeCanvas =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(QRCodeCanvas, _React$PureComponent);\n\n  function QRCodeCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QRCodeCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRCodeCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_canvas\", void 0);\n\n    return _this;\n  }\n\n  _createClass(QRCodeCanvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          size = _this$props.size,\n          level = _this$props.level,\n          bgColor = _this$props.bgColor,\n          fgColor = _this$props.fgColor,\n          includeMargin = _this$props.includeMargin; // We'll use type===-1 to force QRCode to automatically pick the best type\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n\n      if (this._canvas != null) {\n        var canvas = this._canvas;\n        var ctx = canvas.getContext('2d');\n\n        if (!ctx) {\n          return;\n        }\n\n        var cells = qrcode.modules;\n\n        if (cells === null) {\n          return;\n        }\n\n        var margin = includeMargin ? MARGIN_SIZE : 0;\n        var numCells = cells.length + margin * 2; // We're going to scale this so that the number of drawable units\n        // matches the number of cells. This avoids rounding issues, but does\n        // result in some potentially unwanted single pixel issues between\n        // blocks, only in environments that don't support Path2D.\n\n        var pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        var scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale); // Draw solid background, only paint dark modules.\n\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n\n        if (SUPPORTS_PATH2D) {\n          // $FlowFixMe: Path2D c'tor doesn't support args yet.\n          ctx.fill(new Path2D(generatePath(cells, margin)));\n        } else {\n          cells.forEach(function (row, rdx) {\n            row.forEach(function (cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          size = _this$props2.size,\n          level = _this$props2.level,\n          bgColor = _this$props2.bgColor,\n          fgColor = _this$props2.fgColor,\n          style = _this$props2.style,\n          includeMargin = _this$props2.includeMargin,\n          otherProps = _objectWithoutProperties(_this$props2, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"style\", \"includeMargin\"]);\n\n      var canvasStyle = _objectSpread({\n        height: size,\n        width: size\n      }, style);\n\n      return React.createElement(\"canvas\", _extends({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: function ref(_ref) {\n          return _this2._canvas = _ref;\n        }\n      }, otherProps));\n    }\n  }]);\n\n  return QRCodeCanvas;\n}(React.PureComponent);\n\n_defineProperty(QRCodeCanvas, \"defaultProps\", DEFAULT_PROPS);\n\n_defineProperty(QRCodeCanvas, \"propTypes\", PROP_TYPES);\n\nvar QRCodeSVG =\n/*#__PURE__*/\nfunction (_React$PureComponent2) {\n  _inherits(QRCodeSVG, _React$PureComponent2);\n\n  function QRCodeSVG() {\n    _classCallCheck(this, QRCodeSVG);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRCodeSVG).apply(this, arguments));\n  }\n\n  _createClass(QRCodeSVG, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          size = _this$props3.size,\n          level = _this$props3.level,\n          bgColor = _this$props3.bgColor,\n          fgColor = _this$props3.fgColor,\n          includeMargin = _this$props3.includeMargin,\n          otherProps = _objectWithoutProperties(_this$props3, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\"]); // We'll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n      var cells = qrcode.modules;\n\n      if (cells === null) {\n        return null;\n      }\n\n      var margin = includeMargin ? MARGIN_SIZE : 0; // Drawing strategy: instead of a rect per module, we're going to create a\n      // single path for the dark modules and layer that on top of a light rect,\n      // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n      // way faster than DOM ops.\n      // For level 1, 441 nodes -> 2\n      // For level 40, 31329 -> 2\n\n      var fgPath = generatePath(cells, margin);\n      var numCells = cells.length + margin * 2;\n      return React.createElement(\"svg\", _extends({\n        shapeRendering: \"crispEdges\",\n        height: size,\n        width: size,\n        viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells)\n      }, otherProps), React.createElement(\"path\", {\n        fill: bgColor,\n        d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\")\n      }), React.createElement(\"path\", {\n        fill: fgColor,\n        d: fgPath\n      }));\n    }\n  }]);\n\n  return QRCodeSVG;\n}(React.PureComponent);\n\n_defineProperty(QRCodeSVG, \"defaultProps\", DEFAULT_PROPS);\n\n_defineProperty(QRCodeSVG, \"propTypes\", PROP_TYPES);\n\nvar QRCode = function QRCode(props) {\n  var renderAs = props.renderAs,\n      otherProps = _objectWithoutProperties(props, [\"renderAs\"]);\n\n  var Component = renderAs === 'svg' ? QRCodeSVG : QRCodeCanvas;\n  return React.createElement(Component, otherProps);\n};\n\nQRCode.defaultProps = _objectSpread({\n  renderAs: 'canvas'\n}, DEFAULT_PROPS);\nmodule.exports = QRCode;","var BitByte = require('./8BitByte');\nvar RSBlock = require('./RSBlock');\nvar BitBuffer = require('./BitBuffer');\nvar util = require('./util');\nvar Polynomial = require('./Polynomial');\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n\tthis.typeNumber = typeNumber;\n\tthis.errorCorrectLevel = errorCorrectLevel;\n\tthis.modules = null;\n\tthis.moduleCount = 0;\n\tthis.dataCache = null;\n\tthis.dataList = [];\n}\n\n// for client side minification\nvar proto = QRCode.prototype;\n\nproto.addData = function(data) {\n\tvar newData = new BitByte(data);\n\tthis.dataList.push(newData);\n\tthis.dataCache = null;\n};\n\nproto.isDark = function(row, col) {\n\tif (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n\t\tthrow new Error(row + \",\" + col);\n\t}\n\treturn this.modules[row][col];\n};\n\nproto.getModuleCount = function() {\n\treturn this.moduleCount;\n};\n\nproto.make = function() {\n\t// Calculate automatically typeNumber if provided is < 1\n\tif (this.typeNumber < 1 ){\n\t\tvar typeNumber = 1;\n\t\tfor (typeNumber = 1; typeNumber < 40; typeNumber++) {\n\t\t\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n\n\t\t\tvar buffer = new BitBuffer();\n\t\t\tvar totalDataCount = 0;\n\t\t\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\t\t\ttotalDataCount += rsBlocks[i].dataCount;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < this.dataList.length; i++) {\n\t\t\t\tvar data = this.dataList[i];\n\t\t\t\tbuffer.put(data.mode, 4);\n\t\t\t\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\n\t\t\t\tdata.write(buffer);\n\t\t\t}\n\t\t\tif (buffer.getLengthInBits() <= totalDataCount * 8)\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.typeNumber = typeNumber;\n\t}\n\tthis.makeImpl(false, this.getBestMaskPattern() );\n};\n\nproto.makeImpl = function(test, maskPattern) {\n\t\n\tthis.moduleCount = this.typeNumber * 4 + 17;\n\tthis.modules = new Array(this.moduleCount);\n\t\n\tfor (var row = 0; row < this.moduleCount; row++) {\n\t\t\n\t\tthis.modules[row] = new Array(this.moduleCount);\n\t\t\n\t\tfor (var col = 0; col < this.moduleCount; col++) {\n\t\t\tthis.modules[row][col] = null;//(col + row) % 3;\n\t\t}\n\t}\n\n\tthis.setupPositionProbePattern(0, 0);\n\tthis.setupPositionProbePattern(this.moduleCount - 7, 0);\n\tthis.setupPositionProbePattern(0, this.moduleCount - 7);\n\tthis.setupPositionAdjustPattern();\n\tthis.setupTimingPattern();\n\tthis.setupTypeInfo(test, maskPattern);\n\t\n\tif (this.typeNumber >= 7) {\n\t\tthis.setupTypeNumber(test);\n\t}\n\n\tif (this.dataCache == null) {\n\t\tthis.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n\t}\n\n\tthis.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function(row, col)  {\n\t\n\tfor (var r = -1; r <= 7; r++) {\n\t\t\n\t\tif (row + r <= -1 || this.moduleCount <= row + r) continue;\n\t\t\n\t\tfor (var c = -1; c <= 7; c++) {\n\t\t\t\n\t\t\tif (col + c <= -1 || this.moduleCount <= col + c) continue;\n\t\t\t\n\t\t\tif ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n\t\t\t\t\t|| (0 <= c && c <= 6 && (r == 0 || r == 6) )\n\t\t\t\t\t|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t} else {\n\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t}\n\t\t}\t\t\n\t}\t\t\n};\n\nproto.getBestMaskPattern = function() {\n\n\tvar minLostPoint = 0;\n\tvar pattern = 0;\n\n\tfor (var i = 0; i < 8; i++) {\n\t\t\n\t\tthis.makeImpl(true, i);\n\n\t\tvar lostPoint = util.getLostPoint(this);\n\n\t\tif (i == 0 || minLostPoint >  lostPoint) {\n\t\t\tminLostPoint = lostPoint;\n\t\t\tpattern = i;\n\t\t}\n\t}\n\n\treturn pattern;\n};\n\nproto.createMovieClip = function(target_mc, instance_name, depth) {\n\n\tvar qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n\tvar cs = 1;\n\n\tthis.make();\n\n\tfor (var row = 0; row < this.modules.length; row++) {\n\t\t\n\t\tvar y = row * cs;\n\t\t\n\t\tfor (var col = 0; col < this.modules[row].length; col++) {\n\n\t\t\tvar x = col * cs;\n\t\t\tvar dark = this.modules[row][col];\n\t\t\n\t\t\tif (dark) {\n\t\t\t\tqr_mc.beginFill(0, 100);\n\t\t\t\tqr_mc.moveTo(x, y);\n\t\t\t\tqr_mc.lineTo(x + cs, y);\n\t\t\t\tqr_mc.lineTo(x + cs, y + cs);\n\t\t\t\tqr_mc.lineTo(x, y + cs);\n\t\t\t\tqr_mc.endFill();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn qr_mc;\n};\n\nproto.setupTimingPattern = function() {\n\t\n\tfor (var r = 8; r < this.moduleCount - 8; r++) {\n\t\tif (this.modules[r][6] != null) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis.modules[r][6] = (r % 2 == 0);\n\t}\n\n\tfor (var c = 8; c < this.moduleCount - 8; c++) {\n\t\tif (this.modules[6][c] != null) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis.modules[6][c] = (c % 2 == 0);\n\t}\n};\n\nproto.setupPositionAdjustPattern = function() {\n\n\tvar pos = util.getPatternPosition(this.typeNumber);\n\t\n\tfor (var i = 0; i < pos.length; i++) {\n\t\n\t\tfor (var j = 0; j < pos.length; j++) {\n\t\t\n\t\t\tvar row = pos[i];\n\t\t\tvar col = pos[j];\n\t\t\t\n\t\t\tif (this.modules[row][col] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var r = -2; r <= 2; r++) {\n\t\t\t\n\t\t\t\tfor (var c = -2; c <= 2; c++) {\n\t\t\t\t\n\t\t\t\t\tif (r == -2 || r == 2 || c == -2 || c == 2\n\t\t\t\t\t\t\t|| (r == 0 && c == 0) ) {\n\t\t\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nproto.setupTypeNumber = function(test) {\n\n\tvar bits = util.getBCHTypeNumber(this.typeNumber);\n\n\tfor (var i = 0; i < 18; i++) {\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\tthis.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n\t}\n\n\tfor (var i = 0; i < 18; i++) {\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\tthis.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n\t}\n};\n\nproto.setupTypeInfo = function(test, maskPattern) {\n\n\tvar data = (this.errorCorrectLevel << 3) | maskPattern;\n\tvar bits = util.getBCHTypeInfo(data);\n\n\t// vertical\t\t\n\tfor (var i = 0; i < 15; i++) {\n\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\n\t\tif (i < 6) {\n\t\t\tthis.modules[i][8] = mod;\n\t\t} else if (i < 8) {\n\t\t\tthis.modules[i + 1][8] = mod;\n\t\t} else {\n\t\t\tthis.modules[this.moduleCount - 15 + i][8] = mod;\n\t\t}\n\t}\n\n\t// horizontal\n\tfor (var i = 0; i < 15; i++) {\n\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\t\n\t\tif (i < 8) {\n\t\t\tthis.modules[8][this.moduleCount - i - 1] = mod;\n\t\t} else if (i < 9) {\n\t\t\tthis.modules[8][15 - i - 1 + 1] = mod;\n\t\t} else {\n\t\t\tthis.modules[8][15 - i - 1] = mod;\n\t\t}\n\t}\n\n\t// fixed module\n\tthis.modules[this.moduleCount - 8][8] = (!test);\n};\n\nproto.mapData = function(data, maskPattern) {\n\t\n\tvar inc = -1;\n\tvar row = this.moduleCount - 1;\n\tvar bitIndex = 7;\n\tvar byteIndex = 0;\n\t\n\tfor (var col = this.moduleCount - 1; col > 0; col -= 2) {\n\n\t\tif (col == 6) col--;\n\n\t\twhile (true) {\n\n\t\t\tfor (var c = 0; c < 2; c++) {\n\t\t\t\t\n\t\t\t\tif (this.modules[row][col - c] == null) {\n\t\t\t\t\t\n\t\t\t\t\tvar dark = false;\n\n\t\t\t\t\tif (byteIndex < data.length) {\n\t\t\t\t\t\tdark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar mask = util.getMask(maskPattern, row, col - c);\n\n\t\t\t\t\tif (mask) {\n\t\t\t\t\t\tdark = !dark;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.modules[row][col - c] = dark;\n\t\t\t\t\tbitIndex--;\n\n\t\t\t\t\tif (bitIndex == -1) {\n\t\t\t\t\t\tbyteIndex++;\n\t\t\t\t\t\tbitIndex = 7;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\trow += inc;\n\n\t\t\tif (row < 0 || this.moduleCount <= row) {\n\t\t\t\trow -= inc;\n\t\t\t\tinc = -inc;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {\n\t\n\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\t\n\tvar buffer = new BitBuffer();\n\t\n\tfor (var i = 0; i < dataList.length; i++) {\n\t\tvar data = dataList[i];\n\t\tbuffer.put(data.mode, 4);\n\t\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\n\t\tdata.write(buffer);\n\t}\n\n\t// calc num max data.\n\tvar totalDataCount = 0;\n\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\ttotalDataCount += rsBlocks[i].dataCount;\n\t}\n\n\tif (buffer.getLengthInBits() > totalDataCount * 8) {\n\t\tthrow new Error(\"code length overflow. (\"\n\t\t\t+ buffer.getLengthInBits()\n\t\t\t+ \">\"\n\t\t\t+  totalDataCount * 8\n\t\t\t+ \")\");\n\t}\n\n\t// end code\n\tif (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n\t\tbuffer.put(0, 4);\n\t}\n\n\t// padding\n\twhile (buffer.getLengthInBits() % 8 != 0) {\n\t\tbuffer.putBit(false);\n\t}\n\n\t// padding\n\twhile (true) {\n\t\t\n\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\tbreak;\n\t\t}\n\t\tbuffer.put(QRCode.PAD0, 8);\n\t\t\n\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\tbreak;\n\t\t}\n\t\tbuffer.put(QRCode.PAD1, 8);\n\t}\n\n\treturn QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function(buffer, rsBlocks) {\n\n\tvar offset = 0;\n\t\n\tvar maxDcCount = 0;\n\tvar maxEcCount = 0;\n\t\n\tvar dcdata = new Array(rsBlocks.length);\n\tvar ecdata = new Array(rsBlocks.length);\n\t\n\tfor (var r = 0; r < rsBlocks.length; r++) {\n\n\t\tvar dcCount = rsBlocks[r].dataCount;\n\t\tvar ecCount = rsBlocks[r].totalCount - dcCount;\n\n\t\tmaxDcCount = Math.max(maxDcCount, dcCount);\n\t\tmaxEcCount = Math.max(maxEcCount, ecCount);\n\t\t\n\t\tdcdata[r] = new Array(dcCount);\n\t\t\n\t\tfor (var i = 0; i < dcdata[r].length; i++) {\n\t\t\tdcdata[r][i] = 0xff & buffer.buffer[i + offset];\n\t\t}\n\t\toffset += dcCount;\n\t\t\n\t\tvar rsPoly = util.getErrorCorrectPolynomial(ecCount);\n\t\tvar rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n\n\t\tvar modPoly = rawPoly.mod(rsPoly);\n\t\tecdata[r] = new Array(rsPoly.getLength() - 1);\n\t\tfor (var i = 0; i < ecdata[r].length; i++) {\n            var modIndex = i + modPoly.getLength() - ecdata[r].length;\n\t\t\tecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;\n\t\t}\n\n\t}\n\t\n\tvar totalCodeCount = 0;\n\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\ttotalCodeCount += rsBlocks[i].totalCount;\n\t}\n\n\tvar data = new Array(totalCodeCount);\n\tvar index = 0;\n\n\tfor (var i = 0; i < maxDcCount; i++) {\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\tif (i < dcdata[r].length) {\n\t\t\t\tdata[index++] = dcdata[r][i];\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (var i = 0; i < maxEcCount; i++) {\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\tif (i < ecdata[r].length) {\n\t\t\t\tdata[index++] = ecdata[r][i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn data;\n};\n\nmodule.exports = QRCode;\n\n","var Mode = require('./mode');\nvar Polynomial = require('./Polynomial');\nvar math = require('./math');\n\nvar QRMaskPattern = {\n\tPATTERN000 : 0,\n\tPATTERN001 : 1,\n\tPATTERN010 : 2,\n\tPATTERN011 : 3,\n\tPATTERN100 : 4,\n\tPATTERN101 : 5,\n\tPATTERN110 : 6,\n\tPATTERN111 : 7\n};\n\nvar QRUtil = {\n\n    PATTERN_POSITION_TABLE : [\n\t    [],\n\t    [6, 18],\n\t    [6, 22],\n\t    [6, 26],\n\t    [6, 30],\n\t    [6, 34],\n\t    [6, 22, 38],\n\t    [6, 24, 42],\n\t    [6, 26, 46],\n\t    [6, 28, 50],\n\t    [6, 30, 54],\t\t\n\t    [6, 32, 58],\n\t    [6, 34, 62],\n\t    [6, 26, 46, 66],\n\t    [6, 26, 48, 70],\n\t    [6, 26, 50, 74],\n\t    [6, 30, 54, 78],\n\t    [6, 30, 56, 82],\n\t    [6, 30, 58, 86],\n\t    [6, 34, 62, 90],\n\t    [6, 28, 50, 72, 94],\n\t    [6, 26, 50, 74, 98],\n\t    [6, 30, 54, 78, 102],\n\t    [6, 28, 54, 80, 106],\n\t    [6, 32, 58, 84, 110],\n\t    [6, 30, 58, 86, 114],\n\t    [6, 34, 62, 90, 118],\n\t    [6, 26, 50, 74, 98, 122],\n\t    [6, 30, 54, 78, 102, 126],\n\t    [6, 26, 52, 78, 104, 130],\n\t    [6, 30, 56, 82, 108, 134],\n\t    [6, 34, 60, 86, 112, 138],\n\t    [6, 30, 58, 86, 114, 142],\n\t    [6, 34, 62, 90, 118, 146],\n\t    [6, 30, 54, 78, 102, 126, 150],\n\t    [6, 24, 50, 76, 102, 128, 154],\n\t    [6, 28, 54, 80, 106, 132, 158],\n\t    [6, 32, 58, 84, 110, 136, 162],\n\t    [6, 26, 54, 82, 110, 138, 166],\n\t    [6, 30, 58, 86, 114, 142, 170]\n    ],\n\n    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),\n    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),\n    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)\t| (1 << 4) | (1 << 1),\n\n    getBCHTypeInfo : function(data) {\n\t    var d = data << 10;\n\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n\t\t    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); \t\n\t    }\n\t    return ( (data << 10) | d) ^ QRUtil.G15_MASK;\n    },\n\n    getBCHTypeNumber : function(data) {\n\t    var d = data << 12;\n\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n\t\t    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); \t\n\t    }\n\t    return (data << 12) | d;\n    },\n\n    getBCHDigit : function(data) {\n\n\t    var digit = 0;\n\n\t    while (data != 0) {\n\t\t    digit++;\n\t\t    data >>>= 1;\n\t    }\n\n\t    return digit;\n    },\n\n    getPatternPosition : function(typeNumber) {\n\t    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n\n    getMask : function(maskPattern, i, j) {\n\t    \n\t    switch (maskPattern) {\n\t\t    \n\t    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;\n\t    case QRMaskPattern.PATTERN001 : return i % 2 == 0;\n\t    case QRMaskPattern.PATTERN010 : return j % 3 == 0;\n\t    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;\n\t    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;\n\t    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;\n\t    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;\n\t    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;\n\n\t    default :\n\t\t    throw new Error(\"bad maskPattern:\" + maskPattern);\n\t    }\n    },\n\n    getErrorCorrectPolynomial : function(errorCorrectLength) {\n\n\t    var a = new Polynomial([1], 0);\n\n\t    for (var i = 0; i < errorCorrectLength; i++) {\n\t\t    a = a.multiply(new Polynomial([1, math.gexp(i)], 0) );\n\t    }\n\n\t    return a;\n    },\n\n    getLengthInBits : function(mode, type) {\n\n\t    if (1 <= type && type < 10) {\n\n\t\t    // 1 - 9\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 10;\n\t\t    case Mode.MODE_ALPHA_NUM \t: return 9;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 8;\n\t\t    case Mode.MODE_KANJI  \t: return 8;\n\t\t    default :\n\t\t\t    throw new Error(\"mode:\" + mode);\n\t\t    }\n\n\t    } else if (type < 27) {\n\n\t\t    // 10 - 26\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 12;\n\t\t    case Mode.MODE_ALPHA_NUM \t: return 11;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 16;\n\t\t    case Mode.MODE_KANJI  \t: return 10;\n\t\t    default :\n\t\t\t    throw new Error(\"mode:\" + mode);\n\t\t    }\n\n\t    } else if (type < 41) {\n\n\t\t    // 27 - 40\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 14;\n\t\t    case Mode.MODE_ALPHA_NUM\t: return 13;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 16;\n\t\t    case Mode.MODE_KANJI  \t: return 12;\n\t\t    default :\n\t\t\t    throw new Error(\"mode:\" + mode);\n\t\t    }\n\n\t    } else {\n\t\t    throw new Error(\"type:\" + type);\n\t    }\n    },\n\n    getLostPoint : function(qrCode) {\n\t    \n\t    var moduleCount = qrCode.getModuleCount();\n\t    \n\t    var lostPoint = 0;\n\t    \n\t    // LEVEL1\n\t    \n\t    for (var row = 0; row < moduleCount; row++) {\n\n\t\t    for (var col = 0; col < moduleCount; col++) {\n\n\t\t\t    var sameCount = 0;\n\t\t\t    var dark = qrCode.isDark(row, col);\n\n\t\t\t\tfor (var r = -1; r <= 1; r++) {\n\n\t\t\t\t    if (row + r < 0 || moduleCount <= row + r) {\n\t\t\t\t\t    continue;\n\t\t\t\t    }\n\n\t\t\t\t    for (var c = -1; c <= 1; c++) {\n\n\t\t\t\t\t    if (col + c < 0 || moduleCount <= col + c) {\n\t\t\t\t\t\t    continue;\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if (r == 0 && c == 0) {\n\t\t\t\t\t\t    continue;\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if (dark == qrCode.isDark(row + r, col + c) ) {\n\t\t\t\t\t\t    sameCount++;\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t    }\n\n\t\t\t    if (sameCount > 5) {\n\t\t\t\t    lostPoint += (3 + sameCount - 5);\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL2\n\n\t    for (var row = 0; row < moduleCount - 1; row++) {\n\t\t    for (var col = 0; col < moduleCount - 1; col++) {\n\t\t\t    var count = 0;\n\t\t\t    if (qrCode.isDark(row,     col    ) ) count++;\n\t\t\t    if (qrCode.isDark(row + 1, col    ) ) count++;\n\t\t\t    if (qrCode.isDark(row,     col + 1) ) count++;\n\t\t\t    if (qrCode.isDark(row + 1, col + 1) ) count++;\n\t\t\t    if (count == 0 || count == 4) {\n\t\t\t\t    lostPoint += 3;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL3\n\n\t    for (var row = 0; row < moduleCount; row++) {\n\t\t    for (var col = 0; col < moduleCount - 6; col++) {\n\t\t\t    if (qrCode.isDark(row, col)\n\t\t\t\t\t    && !qrCode.isDark(row, col + 1)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 2)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 3)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 4)\n\t\t\t\t\t    && !qrCode.isDark(row, col + 5)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 6) ) {\n\t\t\t\t    lostPoint += 40;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    for (var col = 0; col < moduleCount; col++) {\n\t\t    for (var row = 0; row < moduleCount - 6; row++) {\n\t\t\t    if (qrCode.isDark(row, col)\n\t\t\t\t\t    && !qrCode.isDark(row + 1, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 2, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 3, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 4, col)\n\t\t\t\t\t    && !qrCode.isDark(row + 5, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 6, col) ) {\n\t\t\t\t    lostPoint += 40;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL4\n\t    \n\t    var darkCount = 0;\n\n\t    for (var col = 0; col < moduleCount; col++) {\n\t\t    for (var row = 0; row < moduleCount; row++) {\n\t\t\t    if (qrCode.isDark(row, col) ) {\n\t\t\t\t    darkCount++;\n\t\t\t    }\n\t\t    }\n\t    }\n\t    \n\t    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n\t    lostPoint += ratio * 10;\n\n\t    return lostPoint;\t\t\n    }\n};\n\nmodule.exports = QRUtil;\n","function QRBitBuffer() {\n\tthis.buffer = new Array();\n\tthis.length = 0;\n}\n\nQRBitBuffer.prototype = {\n\n\tget : function(index) {\n\t\tvar bufIndex = Math.floor(index / 8);\n\t\treturn ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n\t},\n\t\n\tput : function(num, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tthis.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n\t\t}\n\t},\n\t\n\tgetLengthInBits : function() {\n\t\treturn this.length;\n\t},\n\t\n\tputBit : function(bit) {\n\t\n\t\tvar bufIndex = Math.floor(this.length / 8);\n\t\tif (this.buffer.length <= bufIndex) {\n\t\t\tthis.buffer.push(0);\n\t\t}\n\t\n\t\tif (bit) {\n\t\t\tthis.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );\n\t\t}\n\t\n\t\tthis.length++;\n\t}\n};\n\nmodule.exports = QRBitBuffer;\n","module.exports = {\n\tMODE_NUMBER :\t\t1 << 0,\n\tMODE_ALPHA_NUM : \t1 << 1,\n\tMODE_8BIT_BYTE : \t1 << 2,\n\tMODE_KANJI :\t\t1 << 3\n};\n"],"sourceRoot":""}